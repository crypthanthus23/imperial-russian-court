// Imperial Court HUD - Stats Meter

// This script displays player stats as floating text visible to others

// Constants

integer STATS_CHANNEL = -987654321; // Communication channel between HUD
and meter

float TEXT_UPDATE_RATE = 0.5; // How often to update the floating text
(in seconds)

vector TEXT_COLOR = <1.0, 0.8, 0.6>; // Amber/gold color for text

float TEXT_ALPHA = 1.0; // Text opacity (1.0 = fully opaque)

// Variables

string playerName = "";

string familyName = "";

string rankName = "";

string russianRankName = "";

string wealthCategory = "";

integer health = 100;

integer charm = 50;

integer influence = 25;

integer imperialFavor = 0;

integer rubles = 0;

integer experience = 0;

string courtPosition = "";

integer playerGender = 0; // 0=male, 1=female

// Flags

integer textVisible = TRUE;

integer isLinked = FALSE;

key hudOwnerID = NULL_KEY;

// Function to format and display the stats as floating text

updateFloatingText() {

if (!textVisible) {

llSetText("", <0,0,0>, 0.0);

return;

}

string displayText = "";

// Add header with player name and rank if available

if (playerName != "" && familyName != "") {

displayText += playerName + " " + familyName + "\n";

if (rankName != "") {

displayText += rankName;

if (russianRankName != "") {

displayText += " (" + russianRankName + ")";

}

displayText += "\n";

}

// Add court position if any

if (courtPosition != "") {

displayText += courtPosition + "\n";

}

// Add horizontal line

displayText += "---------------------\n";

// Add gender identifier (optional)

if (playerGender == 0) {

displayText += "Gentleman\n";

} else if (playerGender == 1) {

displayText += "Lady\n";

}

// Add stats

displayText += "Health: " + (string)health + "/100\n";

displayText += "Charm: " + (string)charm + "/100\n";

displayText += "Influence: " + (string)influence + "/100\n";

displayText += "XP: " + (string)experience + "\n";

if (wealthCategory != "") {

displayText += "Wealth: " + wealthCategory + "\n";

displayText += "Rubles: " + (string)rubles + "\n";

}

displayText += "Imperial Favor: " + (string)imperialFavor + "/100\n";

} else {

// Display default text if no player info available

displayText = "Imperial Court Meter\n(Awaiting connection with HUD)";

}

// Set the floating text

llSetText(displayText, TEXT_COLOR, TEXT_ALPHA);

}

// Function to request current stats from the HUD

requestStatsUpdate() {

if (hudOwnerID != NULL_KEY) {

// Send request on the stats channel

llRegionSayTo(hudOwnerID, STATS_CHANNEL, "REQUEST_STATS_UPDATE");

}

}

// Function to parse and process incoming stat data

processStatsData(string data) {

// Split the data string by separator

list dataParts = llParseString2List(data, ["||"], []);

if (llGetListLength(dataParts) < 10) {

llOwnerSay("Error: Received incomplete stats data");

return;

}

// Extract data from the list

playerName = llList2String(dataParts, 0);

familyName = llList2String(dataParts, 1);

rankName = llList2String(dataParts, 2);

russianRankName = llList2String(dataParts, 3);

courtPosition = llList2String(dataParts, 4);

health = (integer)llList2String(dataParts, 5);

charm = (integer)llList2String(dataParts, 6);

influence = (integer)llList2String(dataParts, 7);

experience = (integer)llList2String(dataParts, 8);

rubles = (integer)llList2String(dataParts, 9);

imperialFavor = (integer)llList2String(dataParts, 10);

wealthCategory = llList2String(dataParts, 11);

// Check if gender data is included (added in newer versions)

if (llGetListLength(dataParts) >= 13) {

playerGender = (integer)llList2String(dataParts, 12);

}

// Update the floating text with new data

updateFloatingText();

}

// Main state

default {

state_entry() {

// Initialize the meter

llListen(STATS_CHANNEL, "", NULL_KEY, "");

// Set up initial text

updateFloatingText();

// Start a timer to periodically request updates from the HUD

llSetTimerEvent(TEXT_UPDATE_RATE);

// Let owner know the meter is ready

llOwnerSay("Imperial Court Meter initialized. Place this object near
your character to display your stats.");

}

listen(integer channel, string name, key id, string message) {

if (channel == STATS_CHANNEL) {

// Check if this is a stats update message

if (llGetSubString(message, 0, 10) == "STATS_DATA:") {

// Extract the data part

string data = llGetSubString(message, 11, -1);

processStatsData(data);

// Store the HUD owner ID for future communication

hudOwnerID = id;

isLinked = TRUE;

}

// Check for connection confirmation

else if (message == "HUD_CONNECTED") {

hudOwnerID = id;

isLinked = TRUE;

llOwnerSay("Imperial Court HUD connected successfully.");

requestStatsUpdate();

}

// Check for disconnection message

else if (message == "HUD_DISCONNECTED" && id == hudOwnerID) {

hudOwnerID = NULL_KEY;

isLinked = FALSE;

llOwnerSay("Imperial Court HUD disconnected.");

}

}

}

timer() {

// If we're linked to a HUD, periodically request updates

if (isLinked && hudOwnerID != NULL_KEY) {

requestStatsUpdate();

}

}

touch_start(integer total_number) {

key toucher = llDetectedKey(0);

// Only respond to owner touches

if (toucher == llGetOwner()) {

// Toggle text visibility

textVisible = !textVisible;

if (textVisible) {

llOwnerSay("Stat display enabled.");

updateFloatingText();

} else {

llOwnerSay("Stat display disabled.");

llSetText("", <0,0,0>, 0.0);

}

}

}

changed(integer change) {

// Reset when owner changes

if (change & CHANGED_OWNER) {

llResetScript();

}

}

}

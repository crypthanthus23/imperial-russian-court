// Archivo: config.json
{
  "port": 3000,
  "database_url": "postgresql://imperial_russian_game_user:CoKTfv7sjF8dhTgNSXql66WqHkO0TfW4@dpg-d01e2ja4d50c73fh40ug-a.virginia-postgres.render.com/imperial_russian_game"
}

// Archivo: server.js
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const config = require('./config.json');

const app = express();
const port = process.env.PORT || config.port;

app.use(cors());
app.use(express.json());

// Crear un pool de conexiones para PostgreSQL
const pool = new Pool({
  connectionString: config.database_url,
  ssl: {
    rejectUnauthorized: false,
  }
});

// ===============================
// Endpoint para registrar un jugador
// ===============================
app.post('/api/register_player', async (req, res) => {
  const { player_first_name, player_last_name } = req.body;

  if (!player_first_name || !player_last_name) {
    return res.status(400).json({ error: 'Faltan parámetros de nombre' });
  }

  try {
    const result = await pool.query(
      `INSERT INTO players (player_first_name, player_last_name)
       VALUES ($1, $2)
       RETURNING *`,
      [player_first_name, player_last_name]
    );

    res.status(201).json({
      success: true,
      player: result.rows[0]
    });
  } catch (err) {
    console.error('Error en /api/register_player:', err);
    res.status(500).json({ success: false, error: 'Error interno del servidor' });
  }
});

// ===============================
// Endpoint para obtener información de un jugador
// ===============================
app.get('/api/get_player_info', async (req, res) => {
  const { player_first_name, player_last_name } = req.query;

  if (!player_first_name || !player_last_name) {
    return res.status(400).json({ error: 'Faltan parámetros de nombre' });
  }

  try {
    const result = await pool.query(
      `SELECT * FROM players WHERE player_first_name = $1 AND player_last_name = $2 LIMIT 1`,
      [player_first_name, player_last_name]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Jugador no encontrado' });
    }

    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error consultando la base de datos:', err);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

app.listen(port, () => {
  console.log(`Servidor corriendo en http://localhost:${port}`);
});

// Script SQL sugerido (ejecutar en tu base de datos para crear la tabla)
/*
CREATE TABLE players (
  id SERIAL PRIMARY KEY,
  player_first_name TEXT NOT NULL,
  player_last_name TEXT NOT NULL,
  health INTEGER DEFAULT 100,
  rubles INTEGER DEFAULT 1000000,
  rank TEXT DEFAULT 'Citizen',
  charm INTEGER DEFAULT 10,
  influence INTEGER DEFAULT 10,
  imperial_favor INTEGER DEFAULT 0,
  faith INTEGER DEFAULT 10,
  family_name TEXT DEFAULT '',
  russian_title TEXT DEFAULT '',
  court_position TEXT DEFAULT '',
  wealth TEXT DEFAULT 'Moderate'
);
*/
